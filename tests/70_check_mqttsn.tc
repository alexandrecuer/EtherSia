#include "Arduino.h"
#include "EtherSia.h"
#include "hext.hh"
#include "util.h"

#suite MQTT-SN

#test construct_topic_from_string
MQTTSNTopic topic("foo/bar");
ck_assert_str_eq(topic.name(), "foo/bar");
ck_assert_int_eq(topic.id(), 0x0000);
ck_assert_int_eq(topic.type(), MQTTSNTopic::TYPE_NORMAL);
ck_assert(topic.isFlashString() == false);

#test construct_topic_from_flash_string
MQTTSNTopic topic(F("foo/bar/flash"));
ck_assert_str_eq(topic.name(), "foo/bar/flash");
ck_assert_int_eq(topic.id(), 0x0000);
ck_assert_int_eq(topic.type(), MQTTSNTopic::TYPE_NORMAL);
ck_assert(topic.isFlashString() == true);

#test construct_topic_short_topic_name
MQTTSNTopic topic('S', 'N');
ck_assert_int_eq(topic.id(), 0x534E);
ck_assert_int_eq(topic.type(), MQTTSNTopic::TYPE_SHORT);
ck_assert(topic.isFlashString() == false);

#test construct_topic_predefined_id
MQTTSNTopic topic(0x1234);
ck_assert_int_eq(topic.id(), 0x1234);
ck_assert_int_eq(topic.type(), MQTTSNTopic::TYPE_PREDEFINED);
ck_assert(topic.isFlashString() == false);

#test set_topic_id
MQTTSNTopic topic("foo/bar");
ck_assert_int_eq(topic.id(), 0);
topic.setId(0x0001);
ck_assert_int_eq(topic.id(), 0x0001);


#test construct_client_defaults
EtherSia_Dummy ether;
MQTTSNClient client(ether);

#test setRemoteAddress_ip
EtherSia_Dummy ether;
MQTTSNClient client(ether);
client.setRemoteAddress("fdd7:338b:5691::1");
ck_assert_int_eq(client.remotePort(), 1883);
IPv6Address expect("fdd7:338b:5691::1");
ck_assert(client.remoteAddress() == expect);

// setRemoteAddress() should also assign a local port number
ck_assert_int_gt(client.localPort(), 20000);
ck_assert_int_lt(client.localPort(), 30000);


#test connect_default_clientid
MACAddress routerMac = MACAddress("ca:2f:6d:70:f9:5f");
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:1234::1");
ether.setRouter(routerMac);
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

MQTTSNClient client(ether);
ck_assert_int_eq(client.getState(), MQTTSNClient::MQTT_SN_STATE_DISCONNECTED);
client.setRemoteAddress("2001:4321::1883");
client.connect();
ck_assert_int_eq(client.getState(), MQTTSNClient::MQTT_SN_STATE_CONNECTING);
ck_assert(client.checkConnected() == false);

HextFile expect("packets/mqtt_sn_connect.hext");
frame_t &sent = ether.getLastSent();
ck_assert_int_eq(sent.length, expect.length);
ck_assert_mem_eq(sent.packet, expect.buffer, expect.length);

HextFile connack("packets/mqtt_sn_connack_accepted.hext");
ether.injectRecievedPacket(connack.buffer, connack.length);
ck_assert_int_eq(ether.receivePacket(), 65);
ck_assert(client.checkConnected() == true);
ck_assert_int_eq(client.getState(), MQTTSNClient::MQTT_SN_STATE_CONNECTED);
